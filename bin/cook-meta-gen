#!/usr/bin/python
# /*****************************************************************************
# *          ___  _     _ _                  _                 _               *
# *         / _ \| |   (_) |                | |               | |              *
# *        | (_) | |__  _| |_ __ _  ___  ___| | __  _ __   ___| |_             *
# *         > _ <| '_ \| | __/ _` |/ _ \/ _ \ |/ / | '_ \ / _ \ __|            *
# *        | (_) | |_) | | || (_| |  __/  __/   < _| | | |  __/ |_             *
# *         \___/|_.__/|_|\__\__, |\___|\___|_|\_(_)_| |_|\___|\__|            *
# *                           __/ |                                            *
# *                          |___/                                             *
# *                                                                            *
# *****************************************************************************/
# /****************************************************************************
#  * Copyright (c) 2021 Mike Sharkey <mike@8bitgeek.net>
#  *
#  * Permission is hereby granted, free of charge, to any person obtaining a 
#  * copy of this software and associated documentation files (the "Software"),
#  * to deal in the Software without restriction, including without limitation
#  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
#  * and/or sell copies of the Software, and to permit persons to whom the 
#  * Software is furnished to do so, subject to the following conditions:
#  *
#  * The above copyright notice and this permission notice shall be included in
#  * all copies or substantial portions of the Software.
#  * 
#  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
#  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
#  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
#  * DEALINGS IN THE SOFTWARE.
#  ****************************************************************************
import argparse
import os,codecs
import math,time
import json

# Input project source file meta text
# Output makefile .mk snippet such as: 
# 
# # sources
# include ${SRC_ROOT}/delay/_src.mk
# include ${SRC_ROOT}/led/_src.mk
# 
# # source containing main() function
# SRCS_CC += $(FEATURE_ROOT)/${FEATURE}/main.c
# 

feature={}
source={}
fault='OK'

def load_json_text( fn ):
    json_text=''
    # @FIXME handle file open failure exception gracefully
    with codecs.open(fn, 'r', encoding='utf-8', errors='ignore') as fo:
        not_eof = True
        while not_eof:
            line = fo.readline()
            if line:
                json_text+=line
            else:
                not_eof = False
        fo.close()
    return json_text

def update_feature( dn, fn, meta ):
    metaobj={}
    metaobj[fn]=meta
    if ( feature.get(dn) == None ):
        feature[dn]=[]
    feature[dn].append(metaobj)
    return 

def update_source( dn, fn, meta ):
    metaobj={}
    metaobj[fn]=meta
    if ( source.get(dn) == None ):
        source[dn]=[]
    source[dn].append(metaobj)
    return 

def classify( dn ):
    if ( dn.find('/_feature/') >= 0 ):
        return 'feature'
    if ( dn.find('/_src/') >= 0 ):
        return 'src'
    return ''

def parse_cache( cache_fn ):
    json_text = load_json_text(cache_fn)
    cache = json.loads(json_text)
    for fileno in range(len(cache["cache"])):
        metadata={}
        metaobj = cache["cache"][fileno]
        print(json.dumps(metaobj, sort_keys=False, indent=4))
        if ( metaobj.get("meta") ):
            metadata = metaobj["meta"]
        filepath = metaobj["fn"]
        dn=os.path.dirname(filepath)
        fn=os.path.basename(filepath)
        if ( classify(dn) == 'feature' ):
            update_feature(dn,fn,metadata)
        else:
            update_source(dn,fn,metadata)
    return 

def feature_fragments():
    fragment = '{"feature":'
    fragment += json.dumps(feature, sort_keys=False, indent=4)
    fragment += '}'
    return json.dumps(json.loads(fragment), sort_keys=False, indent=4)

def source_fragments():
    fragment = '{"source":'
    fragment += json.dumps(source, sort_keys=False, indent=4)
    fragment += '}'
    return json.dumps(json.loads(fragment), sort_keys=False, indent=4)

def write_fragments():
    rc=source_fragments()
    if ( rc == 'OK' ):
        print(',')
        print(feature_fragments())
    return rc

parser = argparse.ArgumentParser(description='Parses cook meta cache output and generate makefile snippet output.')
parser.add_argument('--cache', nargs='*', help='cache file to scan')

file_count=0
args = parser.parse_args()
for cacheno in range(len(args.cache)): 
    cache_name=args.cache[cacheno]
    parse_cache(cache_name)

fault = write_fragments()
if ( fault == 'OK' ):
    exit(0)
else:
    print(fault)
    exit(-1)
